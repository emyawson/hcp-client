// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`alerts-threshold-row test suite it renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    alertId="mockThresholdRow"
    intervalModelPath=".preIdealInterval"
    labelTextKey="alerts.preIdealInterval"
    values={
      Object {
        "lowerLimit": "80 mmg/dL (4.4 mmol/L)",
        "thresholdHypo": "60 mmg/dL (3.3 mmol/L)",
        "upperLimit": "125 mmg/dL (6.9 mmol/L)",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": null,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        Array [
          <GridItem
            columns="4"
            span="1"
          >
            <Unknown
              intervalModelPath=".preIdealInterval"
              textKey={undefined}
              value={undefined}
              valueModelPath=".preIdealInterval"
            />
          </GridItem>,
          <GridItem
            columns="4"
            span="1"
          >
            <Unknown
              intervalModelPath=".preIdealInterval"
              textKey={undefined}
              value={undefined}
              valueModelPath=".postIdealInterval"
            />
          </GridItem>,
          <GridItem
            columns="4"
            span="1"
          >
            <Unknown
              intervalModelPath=".preIdealInterval"
              textKey={undefined}
              value={undefined}
              valueModelPath=".noctIdealInterval"
            />
          </GridItem>,
        ],
        <GridItem
          columns="4"
          span="1"
        >
          <Unknown
            activateModelPath=".mockThresholdRow.active"
            disabled={false}
            id="mockThresholdRow"
            initialThresholdLimit={undefined}
            labelTextKey={undefined}
            onUpdateThresholdLimit={undefined}
            thresholdModelPath=".mockThresholdRow.thresholdLimit"
          />
        </GridItem>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "AlertsIntervalGridItem.preIdealInterval",
        "nodeType": "class",
        "props": Object {
          "children": <Unknown
            intervalModelPath=".preIdealInterval"
            textKey={undefined}
            value={undefined}
            valueModelPath=".preIdealInterval"
          />,
          "columns": "4",
          "span": "1",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": ".preIdealIntervalundefined",
          "nodeType": "function",
          "props": Object {
            "intervalModelPath": ".preIdealInterval",
            "textKey": undefined,
            "value": undefined,
            "valueModelPath": ".preIdealInterval",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "AlertsIntervalGridItem.postIdealInterval",
        "nodeType": "class",
        "props": Object {
          "children": <Unknown
            intervalModelPath=".preIdealInterval"
            textKey={undefined}
            value={undefined}
            valueModelPath=".postIdealInterval"
          />,
          "columns": "4",
          "span": "1",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": ".postIdealIntervalundefined",
          "nodeType": "function",
          "props": Object {
            "intervalModelPath": ".preIdealInterval",
            "textKey": undefined,
            "value": undefined,
            "valueModelPath": ".postIdealInterval",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "AlertsIntervalGridItem.noctIdealInterval",
        "nodeType": "class",
        "props": Object {
          "children": <Unknown
            intervalModelPath=".preIdealInterval"
            textKey={undefined}
            value={undefined}
            valueModelPath=".noctIdealInterval"
          />,
          "columns": "4",
          "span": "1",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": ".noctIdealIntervalundefined",
          "nodeType": "function",
          "props": Object {
            "intervalModelPath": ".preIdealInterval",
            "textKey": undefined,
            "value": undefined,
            "valueModelPath": ".noctIdealInterval",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": null,
        "nodeType": "class",
        "props": Object {
          "children": <Unknown
            activateModelPath=".mockThresholdRow.active"
            disabled={false}
            id="mockThresholdRow"
            initialThresholdLimit={undefined}
            labelTextKey={undefined}
            onUpdateThresholdLimit={undefined}
            thresholdModelPath=".mockThresholdRow.thresholdLimit"
          />,
          "columns": "4",
          "span": "1",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": "mockThresholdRow",
          "nodeType": "function",
          "props": Object {
            "activateModelPath": ".mockThresholdRow.active",
            "disabled": false,
            "id": "mockThresholdRow",
            "initialThresholdLimit": undefined,
            "labelTextKey": undefined,
            "onUpdateThresholdLimit": undefined,
            "thresholdModelPath": ".mockThresholdRow.thresholdLimit",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": null,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          Array [
            <GridItem
              columns="4"
              span="1"
            >
              <Unknown
                intervalModelPath=".preIdealInterval"
                textKey={undefined}
                value={undefined}
                valueModelPath=".preIdealInterval"
              />
            </GridItem>,
            <GridItem
              columns="4"
              span="1"
            >
              <Unknown
                intervalModelPath=".preIdealInterval"
                textKey={undefined}
                value={undefined}
                valueModelPath=".postIdealInterval"
              />
            </GridItem>,
            <GridItem
              columns="4"
              span="1"
            >
              <Unknown
                intervalModelPath=".preIdealInterval"
                textKey={undefined}
                value={undefined}
                valueModelPath=".noctIdealInterval"
              />
            </GridItem>,
          ],
          <GridItem
            columns="4"
            span="1"
          >
            <Unknown
              activateModelPath=".mockThresholdRow.active"
              disabled={false}
              id="mockThresholdRow"
              initialThresholdLimit={undefined}
              labelTextKey={undefined}
              onUpdateThresholdLimit={undefined}
              thresholdModelPath=".mockThresholdRow.thresholdLimit"
            />
          </GridItem>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "AlertsIntervalGridItem.preIdealInterval",
          "nodeType": "class",
          "props": Object {
            "children": <Unknown
              intervalModelPath=".preIdealInterval"
              textKey={undefined}
              value={undefined}
              valueModelPath=".preIdealInterval"
            />,
            "columns": "4",
            "span": "1",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": ".preIdealIntervalundefined",
            "nodeType": "function",
            "props": Object {
              "intervalModelPath": ".preIdealInterval",
              "textKey": undefined,
              "value": undefined,
              "valueModelPath": ".preIdealInterval",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "AlertsIntervalGridItem.postIdealInterval",
          "nodeType": "class",
          "props": Object {
            "children": <Unknown
              intervalModelPath=".preIdealInterval"
              textKey={undefined}
              value={undefined}
              valueModelPath=".postIdealInterval"
            />,
            "columns": "4",
            "span": "1",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": ".postIdealIntervalundefined",
            "nodeType": "function",
            "props": Object {
              "intervalModelPath": ".preIdealInterval",
              "textKey": undefined,
              "value": undefined,
              "valueModelPath": ".postIdealInterval",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "AlertsIntervalGridItem.noctIdealInterval",
          "nodeType": "class",
          "props": Object {
            "children": <Unknown
              intervalModelPath=".preIdealInterval"
              textKey={undefined}
              value={undefined}
              valueModelPath=".noctIdealInterval"
            />,
            "columns": "4",
            "span": "1",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": ".noctIdealIntervalundefined",
            "nodeType": "function",
            "props": Object {
              "intervalModelPath": ".preIdealInterval",
              "textKey": undefined,
              "value": undefined,
              "valueModelPath": ".noctIdealInterval",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "class",
          "props": Object {
            "children": <Unknown
              activateModelPath=".mockThresholdRow.active"
              disabled={false}
              id="mockThresholdRow"
              initialThresholdLimit={undefined}
              labelTextKey={undefined}
              onUpdateThresholdLimit={undefined}
              thresholdModelPath=".mockThresholdRow.thresholdLimit"
            />,
            "columns": "4",
            "span": "1",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": "mockThresholdRow",
            "nodeType": "function",
            "props": Object {
              "activateModelPath": ".mockThresholdRow.active",
              "disabled": false,
              "id": "mockThresholdRow",
              "initialThresholdLimit": undefined,
              "labelTextKey": undefined,
              "onUpdateThresholdLimit": undefined,
              "thresholdModelPath": ".mockThresholdRow.thresholdLimit",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
