// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Prescription form component Renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    attachDispatch={[Function]}
    clinicGuide={
      Object {
        "a1": "1",
      }
    }
    clinicGuideFilter={
      Object {
        "a1": "PRESET",
      }
    }
    clinicGuides={
      Object {
        "a1": Array [],
      }
    }
    endDate={
      Object {
        "a1": "2018-02-27T00:00:00.000Z",
      }
    }
    frequencies={
      Object {
        "a1": Array [],
      }
    }
    frequency={
      Object {
        "a1": "twoWeeks",
      }
    }
    handleSubmit={[Function]}
    hasCustomClinicGuide={
      Object {
        "a1": true,
      }
    }
    id="a1"
    period={
      Object {
        "a1": "days",
      }
    }
    periods={
      Object {
        "a1": Array [],
      }
    }
    quantities={
      Object {
        "a1": Array [],
      }
    }
    quantity={
      Object {
        "a1": 6,
      }
    }
    reason={
      Object {
        "a1": "Pregnancy",
      }
    }
    startDate={
      Object {
        "a1": "2018-02-27T00:00:00.000Z",
      }
    }
    stripModel={
      Object {
        "a1": "1",
      }
    }
    therapies={
      Object {
        "a1": Array [],
      }
    }
    therapy={
      Object {
        "a1": "1",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": null,
    "nodeType": "function",
    "props": Object {
      "children": <styled.div>
        <styled.div>
          <styled.div>
            <LabelledDropdown
              disabled={false}
              label="Patient Therapy"
              modelPath=".therapy"
              onChange={undefined}
              options={
                Object {
                  "a1": Array [],
                }
              }
              placeholder="Selection"
            />
          </styled.div>
          <styled.div>
            <LabelledDropdown
              disabled={false}
              label="Clinical Guide"
              labelDecorator={
                <styled.div>
                  <Styled(Link)
                    to="prescription/guide-settings"
                  >
                    <Styled(Button)
                      buttonStyle="outlinedLight"
                      icon={<Unknown />}
                      label="Custom Clinical Guide Settings"
                    />
                  </Styled(Link)>
                </styled.div>
              }
              menuRenderer={[Function]}
              modelPath=".clinicGuide"
              noResultsText={
                <Unknown
                  clinicGuideFilter="PRESET"
                  onSelectFilter={undefined}
                />
              }
              onChange={undefined}
              options={Array []}
              placeholder="Selection"
              valueRenderer={[Function]}
            />
          </styled.div>
          <styled.div>
            <Styled(Link)
              to="prescription/guide-settings"
            >
              <Styled(Button)
                buttonStyle="outlinedLight"
                icon={<Unknown />}
                label="Custom Clinical Guide Settings"
              />
            </Styled(Link)>
          </styled.div>
        </styled.div>
        <styled.div>
          <styled.div>
            <f1
              validate={true}
            >
              <styled.label>
                Number of Tests
              </styled.label>
              <Styled(NumberInputField)
                id="quantity"
                max={undefined}
                min={undefined}
                model=".quantity"
                type="number"
                updateField={undefined}
              />
            </f1>
            <f1
              validate={false}
            >
              <LabelledDropdown
                disabled={true}
                label="Number of Tests"
                modelPath=".quantity"
                options={Array []}
                placeholder="Selection"
              />
            </f1>
          </styled.div>
          <styled.div>
            <LabelledDropdown
              disabled={true}
              label="Test Frequency"
              modelPath=".period"
              options={Array []}
              placeholder="Selection"
            />
          </styled.div>
          <styled.div>
            <LabelledDropdown
              disabled={false}
              label="Model"
              modelPath=".stripModel"
              options={undefined}
              placeholder="Selection"
            />
          </styled.div>
          <styled.div>
            <LabelledDropdown
              disabled={false}
              label="Delivery Frequency"
              modelPath=".frequency"
              options={
                Object {
                  "a1": Array [],
                }
              }
              placeholder="Selection"
            />
          </styled.div>
        </styled.div>
        <f1
          validate={undefined}
        >
          <Unknown
            id="a1"
            onDatesChange={undefined}
            placeholderText="Selection"
            reasons={undefined}
          />
        </f1>
        <styled.div>
          <Unknown
            component={[Function]}
            controlProps={
              Object {
                "accessibilityLabel": "saveAccessibilityLabel",
                "label": "Save Guideline",
                "type": "submit",
              }
            }
            disabled={
              Object {
                "valid": false,
              }
            }
            model="a1"
            name="a1Submit"
          />
        </styled.div>
      </styled.div>,
      "getDispatch": [Function],
      "initialState": Object {
        "clinicGuide": "1",
        "dateRange": Object {
          "endDate": "2018-02-27T00:00:00.000Z",
          "startDate": "2018-02-27T00:00:00.000Z",
        },
        "frequency": "twoWeeks",
        "period": "days",
        "quantity": 6,
        "reason": "Pregnancy",
        "stripModel": Object {
          "a1": "1",
        },
        "therapy": "1",
      },
      "model": "a1",
      "onSubmit": [Function],
      "validators": Object {
        "dateRange": [Function],
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": null,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <styled.div>
            <styled.div>
              <LabelledDropdown
                disabled={false}
                label="Patient Therapy"
                modelPath=".therapy"
                onChange={undefined}
                options={
                  Object {
                    "a1": Array [],
                  }
                }
                placeholder="Selection"
              />
            </styled.div>
            <styled.div>
              <LabelledDropdown
                disabled={false}
                label="Clinical Guide"
                labelDecorator={
                  <styled.div>
                    <Styled(Link)
                      to="prescription/guide-settings"
                    >
                      <Styled(Button)
                        buttonStyle="outlinedLight"
                        icon={<Unknown />}
                        label="Custom Clinical Guide Settings"
                      />
                    </Styled(Link)>
                  </styled.div>
                }
                menuRenderer={[Function]}
                modelPath=".clinicGuide"
                noResultsText={
                  <Unknown
                    clinicGuideFilter="PRESET"
                    onSelectFilter={undefined}
                  />
                }
                onChange={undefined}
                options={Array []}
                placeholder="Selection"
                valueRenderer={[Function]}
              />
            </styled.div>
            <styled.div>
              <Styled(Link)
                to="prescription/guide-settings"
              >
                <Styled(Button)
                  buttonStyle="outlinedLight"
                  icon={<Unknown />}
                  label="Custom Clinical Guide Settings"
                />
              </Styled(Link)>
            </styled.div>
          </styled.div>,
          <styled.div>
            <styled.div>
              <f1
                validate={true}
              >
                <styled.label>
                  Number of Tests
                </styled.label>
                <Styled(NumberInputField)
                  id="quantity"
                  max={undefined}
                  min={undefined}
                  model=".quantity"
                  type="number"
                  updateField={undefined}
                />
              </f1>
              <f1
                validate={false}
              >
                <LabelledDropdown
                  disabled={true}
                  label="Number of Tests"
                  modelPath=".quantity"
                  options={Array []}
                  placeholder="Selection"
                />
              </f1>
            </styled.div>
            <styled.div>
              <LabelledDropdown
                disabled={true}
                label="Test Frequency"
                modelPath=".period"
                options={Array []}
                placeholder="Selection"
              />
            </styled.div>
            <styled.div>
              <LabelledDropdown
                disabled={false}
                label="Model"
                modelPath=".stripModel"
                options={undefined}
                placeholder="Selection"
              />
            </styled.div>
            <styled.div>
              <LabelledDropdown
                disabled={false}
                label="Delivery Frequency"
                modelPath=".frequency"
                options={
                  Object {
                    "a1": Array [],
                  }
                }
                placeholder="Selection"
              />
            </styled.div>
          </styled.div>,
          <f1
            validate={undefined}
          >
            <Unknown
              id="a1"
              onDatesChange={undefined}
              placeholderText="Selection"
              reasons={undefined}
            />
          </f1>,
          <styled.div>
            <Unknown
              component={[Function]}
              controlProps={
                Object {
                  "accessibilityLabel": "saveAccessibilityLabel",
                  "label": "Save Guideline",
                  "type": "submit",
                }
              }
              disabled={
                Object {
                  "valid": false,
                }
              }
              model="a1"
              name="a1Submit"
            />
          </styled.div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": null,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.div>
                <LabelledDropdown
                  disabled={false}
                  label="Patient Therapy"
                  modelPath=".therapy"
                  onChange={undefined}
                  options={
                    Object {
                      "a1": Array [],
                    }
                  }
                  placeholder="Selection"
                />
              </styled.div>,
              <styled.div>
                <LabelledDropdown
                  disabled={false}
                  label="Clinical Guide"
                  labelDecorator={
                    <styled.div>
                      <Styled(Link)
                        to="prescription/guide-settings"
                      >
                        <Styled(Button)
                          buttonStyle="outlinedLight"
                          icon={<Unknown />}
                          label="Custom Clinical Guide Settings"
                        />
                      </Styled(Link)>
                    </styled.div>
                  }
                  menuRenderer={[Function]}
                  modelPath=".clinicGuide"
                  noResultsText={
                    <Unknown
                      clinicGuideFilter="PRESET"
                      onSelectFilter={undefined}
                    />
                  }
                  onChange={undefined}
                  options={Array []}
                  placeholder="Selection"
                  valueRenderer={[Function]}
                />
              </styled.div>,
              <styled.div>
                <Styled(Link)
                  to="prescription/guide-settings"
                >
                  <Styled(Button)
                    buttonStyle="outlinedLight"
                    icon={<Unknown />}
                    label="Custom Clinical Guide Settings"
                  />
                </Styled(Link)>
              </styled.div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": null,
              "nodeType": "class",
              "props": Object {
                "children": <LabelledDropdown
                  disabled={false}
                  label="Patient Therapy"
                  modelPath=".therapy"
                  onChange={undefined}
                  options={
                    Object {
                      "a1": Array [],
                    }
                  }
                  placeholder="Selection"
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": null,
                "nodeType": "function",
                "props": Object {
                  "disabled": false,
                  "label": "Patient Therapy",
                  "modelPath": ".therapy",
                  "onChange": undefined,
                  "options": Object {
                    "a1": Array [],
                  },
                  "placeholder": "Selection",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": null,
              "nodeType": "class",
              "props": Object {
                "children": <LabelledDropdown
                  disabled={false}
                  label="Clinical Guide"
                  labelDecorator={
                    <styled.div>
                      <Styled(Link)
                        to="prescription/guide-settings"
                      >
                        <Styled(Button)
                          buttonStyle="outlinedLight"
                          icon={<Unknown />}
                          label="Custom Clinical Guide Settings"
                        />
                      </Styled(Link)>
                    </styled.div>
                  }
                  menuRenderer={[Function]}
                  modelPath=".clinicGuide"
                  noResultsText={
                    <Unknown
                      clinicGuideFilter="PRESET"
                      onSelectFilter={undefined}
                    />
                  }
                  onChange={undefined}
                  options={Array []}
                  placeholder="Selection"
                  valueRenderer={[Function]}
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": null,
                "nodeType": "function",
                "props": Object {
                  "disabled": false,
                  "label": "Clinical Guide",
                  "labelDecorator": <styled.div>
                    <Styled(Link)
                      to="prescription/guide-settings"
                    >
                      <Styled(Button)
                        buttonStyle="outlinedLight"
                        icon={<Unknown />}
                        label="Custom Clinical Guide Settings"
                      />
                    </Styled(Link)>
                  </styled.div>,
                  "menuRenderer": [Function],
                  "modelPath": ".clinicGuide",
                  "noResultsText": <Unknown
                    clinicGuideFilter="PRESET"
                    onSelectFilter={undefined}
                  />,
                  "onChange": undefined,
                  "options": Array [],
                  "placeholder": "Selection",
                  "valueRenderer": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": null,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Link)
                  to="prescription/guide-settings"
                >
                  <Styled(Button)
                    buttonStyle="outlinedLight"
                    icon={<Unknown />}
                    label="Custom Clinical Guide Settings"
                  />
                </Styled(Link)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": null,
                "nodeType": "class",
                "props": Object {
                  "children": <Styled(Button)
                    buttonStyle="outlinedLight"
                    icon={<Unknown />}
                    label="Custom Clinical Guide Settings"
                  />,
                  "to": "prescription/guide-settings",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "class",
                  "props": Object {
                    "buttonStyle": "outlinedLight",
                    "icon": <Unknown />,
                    "label": "Custom Clinical Guide Settings",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.div>
                <f1
                  validate={true}
                >
                  <styled.label>
                    Number of Tests
                  </styled.label>
                  <Styled(NumberInputField)
                    id="quantity"
                    max={undefined}
                    min={undefined}
                    model=".quantity"
                    type="number"
                    updateField={undefined}
                  />
                </f1>
                <f1
                  validate={false}
                >
                  <LabelledDropdown
                    disabled={true}
                    label="Number of Tests"
                    modelPath=".quantity"
                    options={Array []}
                    placeholder="Selection"
                  />
                </f1>
              </styled.div>,
              <styled.div>
                <LabelledDropdown
                  disabled={true}
                  label="Test Frequency"
                  modelPath=".period"
                  options={Array []}
                  placeholder="Selection"
                />
              </styled.div>,
              <styled.div>
                <LabelledDropdown
                  disabled={false}
                  label="Model"
                  modelPath=".stripModel"
                  options={undefined}
                  placeholder="Selection"
                />
              </styled.div>,
              <styled.div>
                <LabelledDropdown
                  disabled={false}
                  label="Delivery Frequency"
                  modelPath=".frequency"
                  options={
                    Object {
                      "a1": Array [],
                    }
                  }
                  placeholder="Selection"
                />
              </styled.div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": null,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <f1
                    validate={true}
                  >
                    <styled.label>
                      Number of Tests
                    </styled.label>
                    <Styled(NumberInputField)
                      id="quantity"
                      max={undefined}
                      min={undefined}
                      model=".quantity"
                      type="number"
                      updateField={undefined}
                    />
                  </f1>,
                  <f1
                    validate={false}
                  >
                    <LabelledDropdown
                      disabled={true}
                      label="Number of Tests"
                      modelPath=".quantity"
                      options={Array []}
                      placeholder="Selection"
                    />
                  </f1>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <styled.label>
                        Number of Tests
                      </styled.label>,
                      <Styled(NumberInputField)
                        id="quantity"
                        max={undefined}
                        min={undefined}
                        model=".quantity"
                        type="number"
                        updateField={undefined}
                      />,
                    ],
                    "validate": true,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": null,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Number of Tests",
                      },
                      "ref": null,
                      "rendered": "Number of Tests",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": null,
                      "nodeType": "class",
                      "props": Object {
                        "id": "quantity",
                        "max": undefined,
                        "min": undefined,
                        "model": ".quantity",
                        "type": "number",
                        "updateField": undefined,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "function",
                  "props": Object {
                    "children": <LabelledDropdown
                      disabled={true}
                      label="Number of Tests"
                      modelPath=".quantity"
                      options={Array []}
                      placeholder="Selection"
                    />,
                    "validate": false,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": null,
                    "nodeType": "function",
                    "props": Object {
                      "disabled": true,
                      "label": "Number of Tests",
                      "modelPath": ".quantity",
                      "options": Array [],
                      "placeholder": "Selection",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": null,
              "nodeType": "class",
              "props": Object {
                "children": <LabelledDropdown
                  disabled={true}
                  label="Test Frequency"
                  modelPath=".period"
                  options={Array []}
                  placeholder="Selection"
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": null,
                "nodeType": "function",
                "props": Object {
                  "disabled": true,
                  "label": "Test Frequency",
                  "modelPath": ".period",
                  "options": Array [],
                  "placeholder": "Selection",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": null,
              "nodeType": "class",
              "props": Object {
                "children": <LabelledDropdown
                  disabled={false}
                  label="Model"
                  modelPath=".stripModel"
                  options={undefined}
                  placeholder="Selection"
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": null,
                "nodeType": "function",
                "props": Object {
                  "disabled": false,
                  "label": "Model",
                  "modelPath": ".stripModel",
                  "options": undefined,
                  "placeholder": "Selection",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": null,
              "nodeType": "class",
              "props": Object {
                "children": <LabelledDropdown
                  disabled={false}
                  label="Delivery Frequency"
                  modelPath=".frequency"
                  options={
                    Object {
                      "a1": Array [],
                    }
                  }
                  placeholder="Selection"
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": null,
                "nodeType": "function",
                "props": Object {
                  "disabled": false,
                  "label": "Delivery Frequency",
                  "modelPath": ".frequency",
                  "options": Object {
                    "a1": Array [],
                  },
                  "placeholder": "Selection",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "function",
          "props": Object {
            "children": <Unknown
              id="a1"
              onDatesChange={undefined}
              placeholderText="Selection"
              reasons={undefined}
            />,
            "validate": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": null,
            "nodeType": "function",
            "props": Object {
              "id": "a1",
              "onDatesChange": undefined,
              "placeholderText": "Selection",
              "reasons": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "class",
          "props": Object {
            "children": <Unknown
              component={[Function]}
              controlProps={
                Object {
                  "accessibilityLabel": "saveAccessibilityLabel",
                  "label": "Save Guideline",
                  "type": "submit",
                }
              }
              disabled={
                Object {
                  "valid": false,
                }
              }
              model="a1"
              name="a1Submit"
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": null,
            "nodeType": "function",
            "props": Object {
              "component": [Function],
              "controlProps": Object {
                "accessibilityLabel": "saveAccessibilityLabel",
                "label": "Save Guideline",
                "type": "submit",
              },
              "disabled": Object {
                "valid": false,
              },
              "model": "a1",
              "name": "a1Submit",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": null,
      "nodeType": "function",
      "props": Object {
        "children": <styled.div>
          <styled.div>
            <styled.div>
              <LabelledDropdown
                disabled={false}
                label="Patient Therapy"
                modelPath=".therapy"
                onChange={undefined}
                options={
                  Object {
                    "a1": Array [],
                  }
                }
                placeholder="Selection"
              />
            </styled.div>
            <styled.div>
              <LabelledDropdown
                disabled={false}
                label="Clinical Guide"
                labelDecorator={
                  <styled.div>
                    <Styled(Link)
                      to="prescription/guide-settings"
                    >
                      <Styled(Button)
                        buttonStyle="outlinedLight"
                        icon={<Unknown />}
                        label="Custom Clinical Guide Settings"
                      />
                    </Styled(Link)>
                  </styled.div>
                }
                menuRenderer={[Function]}
                modelPath=".clinicGuide"
                noResultsText={
                  <Unknown
                    clinicGuideFilter="PRESET"
                    onSelectFilter={undefined}
                  />
                }
                onChange={undefined}
                options={Array []}
                placeholder="Selection"
                valueRenderer={[Function]}
              />
            </styled.div>
            <styled.div>
              <Styled(Link)
                to="prescription/guide-settings"
              >
                <Styled(Button)
                  buttonStyle="outlinedLight"
                  icon={<Unknown />}
                  label="Custom Clinical Guide Settings"
                />
              </Styled(Link)>
            </styled.div>
          </styled.div>
          <styled.div>
            <styled.div>
              <f1
                validate={true}
              >
                <styled.label>
                  Number of Tests
                </styled.label>
                <Styled(NumberInputField)
                  id="quantity"
                  max={undefined}
                  min={undefined}
                  model=".quantity"
                  type="number"
                  updateField={undefined}
                />
              </f1>
              <f1
                validate={false}
              >
                <LabelledDropdown
                  disabled={true}
                  label="Number of Tests"
                  modelPath=".quantity"
                  options={Array []}
                  placeholder="Selection"
                />
              </f1>
            </styled.div>
            <styled.div>
              <LabelledDropdown
                disabled={true}
                label="Test Frequency"
                modelPath=".period"
                options={Array []}
                placeholder="Selection"
              />
            </styled.div>
            <styled.div>
              <LabelledDropdown
                disabled={false}
                label="Model"
                modelPath=".stripModel"
                options={undefined}
                placeholder="Selection"
              />
            </styled.div>
            <styled.div>
              <LabelledDropdown
                disabled={false}
                label="Delivery Frequency"
                modelPath=".frequency"
                options={
                  Object {
                    "a1": Array [],
                  }
                }
                placeholder="Selection"
              />
            </styled.div>
          </styled.div>
          <f1
            validate={undefined}
          >
            <Unknown
              id="a1"
              onDatesChange={undefined}
              placeholderText="Selection"
              reasons={undefined}
            />
          </f1>
          <styled.div>
            <Unknown
              component={[Function]}
              controlProps={
                Object {
                  "accessibilityLabel": "saveAccessibilityLabel",
                  "label": "Save Guideline",
                  "type": "submit",
                }
              }
              disabled={
                Object {
                  "valid": false,
                }
              }
              model="a1"
              name="a1Submit"
            />
          </styled.div>
        </styled.div>,
        "getDispatch": [Function],
        "initialState": Object {
          "clinicGuide": "1",
          "dateRange": Object {
            "endDate": "2018-02-27T00:00:00.000Z",
            "startDate": "2018-02-27T00:00:00.000Z",
          },
          "frequency": "twoWeeks",
          "period": "days",
          "quantity": 6,
          "reason": "Pregnancy",
          "stripModel": Object {
            "a1": "1",
          },
          "therapy": "1",
        },
        "model": "a1",
        "onSubmit": [Function],
        "validators": Object {
          "dateRange": [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": null,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <styled.div>
              <styled.div>
                <LabelledDropdown
                  disabled={false}
                  label="Patient Therapy"
                  modelPath=".therapy"
                  onChange={undefined}
                  options={
                    Object {
                      "a1": Array [],
                    }
                  }
                  placeholder="Selection"
                />
              </styled.div>
              <styled.div>
                <LabelledDropdown
                  disabled={false}
                  label="Clinical Guide"
                  labelDecorator={
                    <styled.div>
                      <Styled(Link)
                        to="prescription/guide-settings"
                      >
                        <Styled(Button)
                          buttonStyle="outlinedLight"
                          icon={<Unknown />}
                          label="Custom Clinical Guide Settings"
                        />
                      </Styled(Link)>
                    </styled.div>
                  }
                  menuRenderer={[Function]}
                  modelPath=".clinicGuide"
                  noResultsText={
                    <Unknown
                      clinicGuideFilter="PRESET"
                      onSelectFilter={undefined}
                    />
                  }
                  onChange={undefined}
                  options={Array []}
                  placeholder="Selection"
                  valueRenderer={[Function]}
                />
              </styled.div>
              <styled.div>
                <Styled(Link)
                  to="prescription/guide-settings"
                >
                  <Styled(Button)
                    buttonStyle="outlinedLight"
                    icon={<Unknown />}
                    label="Custom Clinical Guide Settings"
                  />
                </Styled(Link)>
              </styled.div>
            </styled.div>,
            <styled.div>
              <styled.div>
                <f1
                  validate={true}
                >
                  <styled.label>
                    Number of Tests
                  </styled.label>
                  <Styled(NumberInputField)
                    id="quantity"
                    max={undefined}
                    min={undefined}
                    model=".quantity"
                    type="number"
                    updateField={undefined}
                  />
                </f1>
                <f1
                  validate={false}
                >
                  <LabelledDropdown
                    disabled={true}
                    label="Number of Tests"
                    modelPath=".quantity"
                    options={Array []}
                    placeholder="Selection"
                  />
                </f1>
              </styled.div>
              <styled.div>
                <LabelledDropdown
                  disabled={true}
                  label="Test Frequency"
                  modelPath=".period"
                  options={Array []}
                  placeholder="Selection"
                />
              </styled.div>
              <styled.div>
                <LabelledDropdown
                  disabled={false}
                  label="Model"
                  modelPath=".stripModel"
                  options={undefined}
                  placeholder="Selection"
                />
              </styled.div>
              <styled.div>
                <LabelledDropdown
                  disabled={false}
                  label="Delivery Frequency"
                  modelPath=".frequency"
                  options={
                    Object {
                      "a1": Array [],
                    }
                  }
                  placeholder="Selection"
                />
              </styled.div>
            </styled.div>,
            <f1
              validate={undefined}
            >
              <Unknown
                id="a1"
                onDatesChange={undefined}
                placeholderText="Selection"
                reasons={undefined}
              />
            </f1>,
            <styled.div>
              <Unknown
                component={[Function]}
                controlProps={
                  Object {
                    "accessibilityLabel": "saveAccessibilityLabel",
                    "label": "Save Guideline",
                    "type": "submit",
                  }
                }
                disabled={
                  Object {
                    "valid": false,
                  }
                }
                model="a1"
                name="a1Submit"
              />
            </styled.div>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": null,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <styled.div>
                  <LabelledDropdown
                    disabled={false}
                    label="Patient Therapy"
                    modelPath=".therapy"
                    onChange={undefined}
                    options={
                      Object {
                        "a1": Array [],
                      }
                    }
                    placeholder="Selection"
                  />
                </styled.div>,
                <styled.div>
                  <LabelledDropdown
                    disabled={false}
                    label="Clinical Guide"
                    labelDecorator={
                      <styled.div>
                        <Styled(Link)
                          to="prescription/guide-settings"
                        >
                          <Styled(Button)
                            buttonStyle="outlinedLight"
                            icon={<Unknown />}
                            label="Custom Clinical Guide Settings"
                          />
                        </Styled(Link)>
                      </styled.div>
                    }
                    menuRenderer={[Function]}
                    modelPath=".clinicGuide"
                    noResultsText={
                      <Unknown
                        clinicGuideFilter="PRESET"
                        onSelectFilter={undefined}
                      />
                    }
                    onChange={undefined}
                    options={Array []}
                    placeholder="Selection"
                    valueRenderer={[Function]}
                  />
                </styled.div>,
                <styled.div>
                  <Styled(Link)
                    to="prescription/guide-settings"
                  >
                    <Styled(Button)
                      buttonStyle="outlinedLight"
                      icon={<Unknown />}
                      label="Custom Clinical Guide Settings"
                    />
                  </Styled(Link)>
                </styled.div>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": null,
                "nodeType": "class",
                "props": Object {
                  "children": <LabelledDropdown
                    disabled={false}
                    label="Patient Therapy"
                    modelPath=".therapy"
                    onChange={undefined}
                    options={
                      Object {
                        "a1": Array [],
                      }
                    }
                    placeholder="Selection"
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "function",
                  "props": Object {
                    "disabled": false,
                    "label": "Patient Therapy",
                    "modelPath": ".therapy",
                    "onChange": undefined,
                    "options": Object {
                      "a1": Array [],
                    },
                    "placeholder": "Selection",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": null,
                "nodeType": "class",
                "props": Object {
                  "children": <LabelledDropdown
                    disabled={false}
                    label="Clinical Guide"
                    labelDecorator={
                      <styled.div>
                        <Styled(Link)
                          to="prescription/guide-settings"
                        >
                          <Styled(Button)
                            buttonStyle="outlinedLight"
                            icon={<Unknown />}
                            label="Custom Clinical Guide Settings"
                          />
                        </Styled(Link)>
                      </styled.div>
                    }
                    menuRenderer={[Function]}
                    modelPath=".clinicGuide"
                    noResultsText={
                      <Unknown
                        clinicGuideFilter="PRESET"
                        onSelectFilter={undefined}
                      />
                    }
                    onChange={undefined}
                    options={Array []}
                    placeholder="Selection"
                    valueRenderer={[Function]}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "function",
                  "props": Object {
                    "disabled": false,
                    "label": "Clinical Guide",
                    "labelDecorator": <styled.div>
                      <Styled(Link)
                        to="prescription/guide-settings"
                      >
                        <Styled(Button)
                          buttonStyle="outlinedLight"
                          icon={<Unknown />}
                          label="Custom Clinical Guide Settings"
                        />
                      </Styled(Link)>
                    </styled.div>,
                    "menuRenderer": [Function],
                    "modelPath": ".clinicGuide",
                    "noResultsText": <Unknown
                      clinicGuideFilter="PRESET"
                      onSelectFilter={undefined}
                    />,
                    "onChange": undefined,
                    "options": Array [],
                    "placeholder": "Selection",
                    "valueRenderer": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": null,
                "nodeType": "class",
                "props": Object {
                  "children": <Styled(Link)
                    to="prescription/guide-settings"
                  >
                    <Styled(Button)
                      buttonStyle="outlinedLight"
                      icon={<Unknown />}
                      label="Custom Clinical Guide Settings"
                    />
                  </Styled(Link)>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "class",
                  "props": Object {
                    "children": <Styled(Button)
                      buttonStyle="outlinedLight"
                      icon={<Unknown />}
                      label="Custom Clinical Guide Settings"
                    />,
                    "to": "prescription/guide-settings",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": null,
                    "nodeType": "class",
                    "props": Object {
                      "buttonStyle": "outlinedLight",
                      "icon": <Unknown />,
                      "label": "Custom Clinical Guide Settings",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": null,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <styled.div>
                  <f1
                    validate={true}
                  >
                    <styled.label>
                      Number of Tests
                    </styled.label>
                    <Styled(NumberInputField)
                      id="quantity"
                      max={undefined}
                      min={undefined}
                      model=".quantity"
                      type="number"
                      updateField={undefined}
                    />
                  </f1>
                  <f1
                    validate={false}
                  >
                    <LabelledDropdown
                      disabled={true}
                      label="Number of Tests"
                      modelPath=".quantity"
                      options={Array []}
                      placeholder="Selection"
                    />
                  </f1>
                </styled.div>,
                <styled.div>
                  <LabelledDropdown
                    disabled={true}
                    label="Test Frequency"
                    modelPath=".period"
                    options={Array []}
                    placeholder="Selection"
                  />
                </styled.div>,
                <styled.div>
                  <LabelledDropdown
                    disabled={false}
                    label="Model"
                    modelPath=".stripModel"
                    options={undefined}
                    placeholder="Selection"
                  />
                </styled.div>,
                <styled.div>
                  <LabelledDropdown
                    disabled={false}
                    label="Delivery Frequency"
                    modelPath=".frequency"
                    options={
                      Object {
                        "a1": Array [],
                      }
                    }
                    placeholder="Selection"
                  />
                </styled.div>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": null,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <f1
                      validate={true}
                    >
                      <styled.label>
                        Number of Tests
                      </styled.label>
                      <Styled(NumberInputField)
                        id="quantity"
                        max={undefined}
                        min={undefined}
                        model=".quantity"
                        type="number"
                        updateField={undefined}
                      />
                    </f1>,
                    <f1
                      validate={false}
                    >
                      <LabelledDropdown
                        disabled={true}
                        label="Number of Tests"
                        modelPath=".quantity"
                        options={Array []}
                        placeholder="Selection"
                      />
                    </f1>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": null,
                    "nodeType": "function",
                    "props": Object {
                      "children": Array [
                        <styled.label>
                          Number of Tests
                        </styled.label>,
                        <Styled(NumberInputField)
                          id="quantity"
                          max={undefined}
                          min={undefined}
                          model=".quantity"
                          type="number"
                          updateField={undefined}
                        />,
                      ],
                      "validate": true,
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": null,
                        "nodeType": "class",
                        "props": Object {
                          "children": "Number of Tests",
                        },
                        "ref": null,
                        "rendered": "Number of Tests",
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": null,
                        "nodeType": "class",
                        "props": Object {
                          "id": "quantity",
                          "max": undefined,
                          "min": undefined,
                          "model": ".quantity",
                          "type": "number",
                          "updateField": undefined,
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": null,
                    "nodeType": "function",
                    "props": Object {
                      "children": <LabelledDropdown
                        disabled={true}
                        label="Number of Tests"
                        modelPath=".quantity"
                        options={Array []}
                        placeholder="Selection"
                      />,
                      "validate": false,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": null,
                      "nodeType": "function",
                      "props": Object {
                        "disabled": true,
                        "label": "Number of Tests",
                        "modelPath": ".quantity",
                        "options": Array [],
                        "placeholder": "Selection",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": null,
                "nodeType": "class",
                "props": Object {
                  "children": <LabelledDropdown
                    disabled={true}
                    label="Test Frequency"
                    modelPath=".period"
                    options={Array []}
                    placeholder="Selection"
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "function",
                  "props": Object {
                    "disabled": true,
                    "label": "Test Frequency",
                    "modelPath": ".period",
                    "options": Array [],
                    "placeholder": "Selection",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": null,
                "nodeType": "class",
                "props": Object {
                  "children": <LabelledDropdown
                    disabled={false}
                    label="Model"
                    modelPath=".stripModel"
                    options={undefined}
                    placeholder="Selection"
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "function",
                  "props": Object {
                    "disabled": false,
                    "label": "Model",
                    "modelPath": ".stripModel",
                    "options": undefined,
                    "placeholder": "Selection",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": null,
                "nodeType": "class",
                "props": Object {
                  "children": <LabelledDropdown
                    disabled={false}
                    label="Delivery Frequency"
                    modelPath=".frequency"
                    options={
                      Object {
                        "a1": Array [],
                      }
                    }
                    placeholder="Selection"
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "function",
                  "props": Object {
                    "disabled": false,
                    "label": "Delivery Frequency",
                    "modelPath": ".frequency",
                    "options": Object {
                      "a1": Array [],
                    },
                    "placeholder": "Selection",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": null,
            "nodeType": "function",
            "props": Object {
              "children": <Unknown
                id="a1"
                onDatesChange={undefined}
                placeholderText="Selection"
                reasons={undefined}
              />,
              "validate": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": null,
              "nodeType": "function",
              "props": Object {
                "id": "a1",
                "onDatesChange": undefined,
                "placeholderText": "Selection",
                "reasons": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": null,
            "nodeType": "class",
            "props": Object {
              "children": <Unknown
                component={[Function]}
                controlProps={
                  Object {
                    "accessibilityLabel": "saveAccessibilityLabel",
                    "label": "Save Guideline",
                    "type": "submit",
                  }
                }
                disabled={
                  Object {
                    "valid": false,
                  }
                }
                model="a1"
                name="a1Submit"
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": null,
              "nodeType": "function",
              "props": Object {
                "component": [Function],
                "controlProps": Object {
                  "accessibilityLabel": "saveAccessibilityLabel",
                  "label": "Save Guideline",
                  "type": "submit",
                },
                "disabled": Object {
                  "valid": false,
                },
                "model": "a1",
                "name": "a1Submit",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
